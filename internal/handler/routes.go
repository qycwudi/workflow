// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	canvas "workflow/internal/handler/canvas"
	kv "workflow/internal/handler/kv"
	workspace "workflow/internal/handler/workspace"
	"workflow/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/common/set/kv",
				Handler: kv.CommonSetKvHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/common/get/vByk",
				Handler: kv.CommonGetVByKHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/workspace/new",
				Handler: workspace.WorkSpaceNewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/remove",
				Handler: workspace.WorkSpaceRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/edit",
				Handler: workspace.WorkSpaceEditHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/list",
				Handler: workspace.WorkSpaceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/detail",
				Handler: workspace.WorkSpaceDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/edit/tag",
				Handler: workspace.WorkSpaceEditTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/edit/canvas/config",
				Handler: workspace.WorkSpaceEditCanvasConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/list",
				Handler: workspace.TagListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/canvas/run",
				Handler: canvas.CanvasRunHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/draft",
				Handler: canvas.CanvasDraftHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/module/list",
				Handler: canvas.ModuleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/detail",
				Handler: canvas.CanvasDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/add/node",
				Handler: canvas.CanvasAddNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/add/edge",
				Handler: canvas.CanvasAddEdgeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/delete/node",
				Handler: canvas.CanvasDeleteNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/delete/edge",
				Handler: canvas.CanvasDeleteEdgeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/edit/node",
				Handler: canvas.CanvasEditNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/edit/edge",
				Handler: canvas.CanvasEditEdgeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/get/node",
				Handler: canvas.CanvasGetNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/get/edge",
				Handler: canvas.CanvasGetEdgeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)
}
