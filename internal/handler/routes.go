// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	api "workflow/internal/handler/api"
	canvas "workflow/internal/handler/canvas"
	datasource "workflow/internal/handler/datasource"
	model "workflow/internal/handler/model"
	workspace "workflow/internal/handler/workspace"
	"workflow/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/workspace/new",
				Handler: workspace.WorkSpaceNewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/remove",
				Handler: workspace.WorkSpaceRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/edit",
				Handler: workspace.WorkSpaceEditHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/list",
				Handler: workspace.WorkSpaceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/edit/tag",
				Handler: workspace.WorkSpaceEditTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/list",
				Handler: workspace.TagListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/edit",
				Handler: workspace.TagEditHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/remove",
				Handler: workspace.TagRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/mock",
				Handler: workspace.MockHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workspace/copy",
				Handler: workspace.WorkSpaceCopyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/canvas/draft",
				Handler: canvas.CanvasDraftHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/detail",
				Handler: canvas.CanvasDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/run",
				Handler: canvas.CanvasRunHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/run/single",
				Handler: canvas.CanvasRunSingleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/canvas/run/single/detail",
				Handler: canvas.CanvasRunSingleDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/canvas/run/history/:workSpaceId",
				Handler: canvas.GetCanvasRunHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/canvas/run/detail/:recordId",
				Handler: canvas.GetCanvasRunDetailHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/publish",
				Handler: api.ApiPublishHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/list",
				Handler: api.ApiListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/onoff",
				Handler: api.ApiOnOffHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/records",
				Handler: api.ApiRecordsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secretkey/list",
				Handler: api.ApiSecretKeyListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secretkey/create",
				Handler: api.ApisecretKeyCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secretkey/update/status",
				Handler: api.ApisecretKeyUpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secretkey/update/expirationtime",
				Handler: api.ApisecretKeyUpdateExpirationTimeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/secretkey/delete",
				Handler: api.ApisecretKeyDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/module/list",
				Handler: model.ModuleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/module/new",
				Handler: model.ModuleNewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/module/edit",
				Handler: model.ModuleEditHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/datasource/list",
				Handler: datasource.DatasourceListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/datasource/add",
				Handler: datasource.DatasourceAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/datasource/edit",
				Handler: datasource.DatasourceEditHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/datasource/delete",
				Handler: datasource.DatasourceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/datasource/test",
				Handler: datasource.DatasourceTestHandler(serverCtx),
			},
		},
		rest.WithPrefix("/workflow"),
	)
}
