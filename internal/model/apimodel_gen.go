// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	apiFieldNames          = builder.RawFieldNames(&Api{})
	apiRows                = strings.Join(apiFieldNames, ",")
	apiRowsExpectAutoSet   = strings.Join(stringx.Remove(apiFieldNames, "`id`"), ",")
	apiRowsWithPlaceHolder = strings.Join(stringx.Remove(apiFieldNames, "`id`"), "=?,") + "=?"
)

type (
	apiModel interface {
		Insert(ctx context.Context, data *Api) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Api, error)
		FindOneByApiId(ctx context.Context, apiId string) (*Api, error)
		Update(ctx context.Context, data *Api) error
		Delete(ctx context.Context, id int64) error
	}

	defaultApiModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Api struct {
		Id          int64  `db:"id"`
		WorkspaceId string `db:"workspace_id"`
		ApiId       string `db:"api_id"`
		ApiName     string `db:"api_name"`
		ApiDesc     string `db:"api_desc"`
		Dsl         string `db:"dsl"`
		Status      string `db:"status"`
	}
)

func newApiModel(conn sqlx.SqlConn) *defaultApiModel {
	return &defaultApiModel{
		conn:  conn,
		table: "`api`",
	}
}

func (m *defaultApiModel) withSession(session sqlx.Session) *defaultApiModel {
	return &defaultApiModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`api`",
	}
}

func (m *defaultApiModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultApiModel) FindOne(ctx context.Context, id int64) (*Api, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", apiRows, m.table)
	var resp Api
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApiModel) FindOneByApiId(ctx context.Context, apiId string) (*Api, error) {
	var resp Api
	query := fmt.Sprintf("select %s from %s where `api_id` = ? limit 1", apiRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, apiId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApiModel) Insert(ctx context.Context, data *Api) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, apiRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.ApiId, data.ApiName, data.ApiDesc, data.Dsl, data.Status)
	return ret, err
}

func (m *defaultApiModel) Update(ctx context.Context, newData *Api) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, apiRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.WorkspaceId, newData.ApiId, newData.ApiName, newData.ApiDesc, newData.Dsl, newData.Status, newData.Id)
	return err
}

func (m *defaultApiModel) tableName() string {
	return m.table
}
