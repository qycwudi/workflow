// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	moduleFieldNames          = builder.RawFieldNames(&Module{})
	moduleRows                = strings.Join(moduleFieldNames, ",")
	moduleRowsExpectAutoSet   = strings.Join(stringx.Remove(moduleFieldNames), ",")
	moduleRowsWithPlaceHolder = strings.Join(stringx.Remove(moduleFieldNames, "`module_id`"), "=?,") + "=?"
)

type (
	moduleModel interface {
		Insert(ctx context.Context, data *Module) (sql.Result, error)
		FindOne(ctx context.Context, moduleId string) (*Module, error)
		Update(ctx context.Context, data *Module) error
		Delete(ctx context.Context, moduleId string) error
	}

	defaultModuleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Module struct {
		ModuleId     string `db:"module_id"`     // 组件ID
		ModuleName   string `db:"module_name"`   // 组件名称
		ModuleType   string `db:"module_type"`   // 组件类型
		ModuleConfig string `db:"module_config"` // 组件配置
		ModuleIndex  int64  `db:"module_index"`  // 排序desc
	}
)

func newModuleModel(conn sqlx.SqlConn) *defaultModuleModel {
	return &defaultModuleModel{
		conn:  conn,
		table: "`module`",
	}
}

func (m *defaultModuleModel) withSession(session sqlx.Session) *defaultModuleModel {
	return &defaultModuleModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`module`",
	}
}

func (m *defaultModuleModel) Delete(ctx context.Context, moduleId string) error {
	query := fmt.Sprintf("delete from %s where `module_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, moduleId)
	return err
}

func (m *defaultModuleModel) FindOne(ctx context.Context, moduleId string) (*Module, error) {
	query := fmt.Sprintf("select %s from %s where `module_id` = ? limit 1", moduleRows, m.table)
	var resp Module
	err := m.conn.QueryRowCtx(ctx, &resp, query, moduleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultModuleModel) Insert(ctx context.Context, data *Module) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, moduleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ModuleId, data.ModuleName, data.ModuleType, data.ModuleConfig, data.ModuleIndex)
	return ret, err
}

func (m *defaultModuleModel) Update(ctx context.Context, data *Module) error {
	query := fmt.Sprintf("update %s set %s where `module_id` = ?", m.table, moduleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ModuleName, data.ModuleType, data.ModuleConfig, data.ModuleIndex, data.ModuleId)
	return err
}

func (m *defaultModuleModel) tableName() string {
	return m.table
}
