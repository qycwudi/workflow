// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rolePermissionsFieldNames          = builder.RawFieldNames(&RolePermissions{})
	rolePermissionsRows                = strings.Join(rolePermissionsFieldNames, ",")
	rolePermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(rolePermissionsFieldNames, "`id`"), ",")
	rolePermissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(rolePermissionsFieldNames, "`id`"), "=?,") + "=?"
)

type (
	rolePermissionsModel interface {
		Insert(ctx context.Context, data *RolePermissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RolePermissions, error)
		FindOneByRoleIdPermissionId(ctx context.Context, roleId int64, permissionId int64) (*RolePermissions, error)
		Update(ctx context.Context, data *RolePermissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRolePermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RolePermissions struct {
		Id           int64     `db:"id"`
		RoleId       int64     `db:"role_id"`       // 角色ID
		PermissionId int64     `db:"permission_id"` // 权限ID
		CreatedAt    time.Time `db:"created_at"`
	}
)

func newRolePermissionsModel(conn sqlx.SqlConn) *defaultRolePermissionsModel {
	return &defaultRolePermissionsModel{
		conn:  conn,
		table: "`role_permissions`",
	}
}

func (m *defaultRolePermissionsModel) withSession(session sqlx.Session) *defaultRolePermissionsModel {
	return &defaultRolePermissionsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`role_permissions`",
	}
}

func (m *defaultRolePermissionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRolePermissionsModel) FindOne(ctx context.Context, id int64) (*RolePermissions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rolePermissionsRows, m.table)
	var resp RolePermissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionsModel) FindOneByRoleIdPermissionId(ctx context.Context, roleId int64, permissionId int64) (*RolePermissions, error) {
	var resp RolePermissions
	query := fmt.Sprintf("select %s from %s where `role_id` = ? and `permission_id` = ? limit 1", rolePermissionsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleId, permissionId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionsModel) Insert(ctx context.Context, data *RolePermissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, rolePermissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.PermissionId, data.CreatedAt)
	return ret, err
}

func (m *defaultRolePermissionsModel) Update(ctx context.Context, newData *RolePermissions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rolePermissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RoleId, newData.PermissionId, newData.CreatedAt, newData.Id)
	return err
}

func (m *defaultRolePermissionsModel) tableName() string {
	return m.table
}
