// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRolesFieldNames          = builder.RawFieldNames(&UserRoles{})
	userRolesRows                = strings.Join(userRolesFieldNames, ",")
	userRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(userRolesFieldNames, "`id`"), ",")
	userRolesRowsWithPlaceHolder = strings.Join(stringx.Remove(userRolesFieldNames, "`id`"), "=?,") + "=?"
)

type (
	userRolesModel interface {
		Insert(ctx context.Context, data *UserRoles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRoles, error)
		FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*UserRoles, error)
		Update(ctx context.Context, data *UserRoles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserRolesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRoles struct {
		Id        int64     `db:"id"`
		UserId    int64     `db:"user_id"` // 用户ID
		RoleId    int64     `db:"role_id"` // 角色ID
		CreatedAt time.Time `db:"created_at"`
	}
)

func newUserRolesModel(conn sqlx.SqlConn) *defaultUserRolesModel {
	return &defaultUserRolesModel{
		conn:  conn,
		table: "`user_roles`",
	}
}

func (m *defaultUserRolesModel) withSession(session sqlx.Session) *defaultUserRolesModel {
	return &defaultUserRolesModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`user_roles`",
	}
}

func (m *defaultUserRolesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserRolesModel) FindOne(ctx context.Context, id int64) (*UserRoles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRolesRows, m.table)
	var resp UserRoles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRolesModel) FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*UserRoles, error) {
	var resp UserRoles
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `role_id` = ? limit 1", userRolesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, roleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRolesModel) Insert(ctx context.Context, data *UserRoles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userRolesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.RoleId, data.CreatedAt)
	return ret, err
}

func (m *defaultUserRolesModel) Update(ctx context.Context, newData *UserRoles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRolesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.RoleId, newData.CreatedAt, newData.Id)
	return err
}

func (m *defaultUserRolesModel) tableName() string {
	return m.table
}
