// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	canvasFieldNames          = builder.RawFieldNames(&Canvas{})
	canvasRows                = strings.Join(canvasFieldNames, ",")
	canvasRowsExpectAutoSet   = strings.Join(stringx.Remove(canvasFieldNames, "`id`"), ",")
	canvasRowsWithPlaceHolder = strings.Join(stringx.Remove(canvasFieldNames, "`id`"), "=?,") + "=?"
)

type (
	canvasModel interface {
		Insert(ctx context.Context, data *Canvas) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Canvas, error)
		FindOneByCanvasId(ctx context.Context, canvasId string) (*Canvas, error)
		Update(ctx context.Context, data *Canvas) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCanvasModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Canvas struct {
		Id             int64     `db:"id"`
		CanvasId       string    `db:"canvas_id"`
		Version        int64     `db:"version"` // 版本
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
		DebugMode      int64     `db:"debug_mode"`     // debug模式
		Configuration  string    `db:"configuration"`  // 配置信息 KV
		AdditionalInfo string    `db:"additionalInfo"` // 扩展信息
	}
)

func newCanvasModel(conn sqlx.SqlConn) *defaultCanvasModel {
	return &defaultCanvasModel{
		conn:  conn,
		table: "`canvas`",
	}
}

func (m *defaultCanvasModel) withSession(session sqlx.Session) *defaultCanvasModel {
	return &defaultCanvasModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`canvas`",
	}
}

func (m *defaultCanvasModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCanvasModel) FindOne(ctx context.Context, id int64) (*Canvas, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", canvasRows, m.table)
	var resp Canvas
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCanvasModel) FindOneByCanvasId(ctx context.Context, canvasId string) (*Canvas, error) {
	var resp Canvas
	query := fmt.Sprintf("select %s from %s where `canvas_id` = ? limit 1", canvasRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, canvasId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCanvasModel) Insert(ctx context.Context, data *Canvas) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, canvasRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CanvasId, data.Version, data.CreateTime, data.UpdateTime, data.DebugMode, data.Configuration, data.AdditionalInfo)
	return ret, err
}

func (m *defaultCanvasModel) Update(ctx context.Context, newData *Canvas) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, canvasRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CanvasId, newData.Version, newData.CreateTime, newData.UpdateTime, newData.DebugMode, newData.Configuration, newData.AdditionalInfo, newData.Id)
	return err
}

func (m *defaultCanvasModel) tableName() string {
	return m.table
}
