// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	canvasHistoryFieldNames          = builder.RawFieldNames(&CanvasHistory{})
	canvasHistoryRows                = strings.Join(canvasHistoryFieldNames, ",")
	canvasHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(canvasHistoryFieldNames, "`id`"), ",")
	canvasHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(canvasHistoryFieldNames, "`id`"), "=?,") + "=?"
)

type (
	canvasHistoryModel interface {
		Insert(ctx context.Context, data *CanvasHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CanvasHistory, error)
		Update(ctx context.Context, data *CanvasHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCanvasHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CanvasHistory struct {
		Id          int64     `db:"id"`
		WorkspaceId string    `db:"workspace_id"`
		Draft       string    `db:"draft"`
		Name        string    `db:"name"`
		CreateTime  time.Time `db:"create_time"`
		Mode        int64     `db:"mode"` // 0-草稿 1-api 2-job
	}
)

func newCanvasHistoryModel(conn sqlx.SqlConn) *defaultCanvasHistoryModel {
	return &defaultCanvasHistoryModel{
		conn:  conn,
		table: "`canvas_history`",
	}
}

func (m *defaultCanvasHistoryModel) withSession(session sqlx.Session) *defaultCanvasHistoryModel {
	return &defaultCanvasHistoryModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`canvas_history`",
	}
}

func (m *defaultCanvasHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCanvasHistoryModel) FindOne(ctx context.Context, id int64) (*CanvasHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", canvasHistoryRows, m.table)
	var resp CanvasHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCanvasHistoryModel) Insert(ctx context.Context, data *CanvasHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, canvasHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.Draft, data.Name, data.CreateTime, data.Mode)
	return ret, err
}

func (m *defaultCanvasHistoryModel) Update(ctx context.Context, data *CanvasHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, canvasHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.Draft, data.Name, data.CreateTime, data.Mode, data.Id)
	return err
}

func (m *defaultCanvasHistoryModel) tableName() string {
	return m.table
}
