// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	kvFieldNames          = builder.RawFieldNames(&Kv{})
	kvRows                = strings.Join(kvFieldNames, ",")
	kvRowsExpectAutoSet   = strings.Join(stringx.Remove(kvFieldNames, "`id`"), ",")
	kvRowsWithPlaceHolder = strings.Join(stringx.Remove(kvFieldNames, "`id`"), "=?,") + "=?"
)

type (
	kvModel interface {
		Insert(ctx context.Context, data *Kv) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Kv, error)
		FindOneByKey(ctx context.Context, key string) (*Kv, error)
		Update(ctx context.Context, data *Kv) error
		Delete(ctx context.Context, id int64) error
	}

	defaultKvModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Kv struct {
		Id    int64  `db:"id"`
		Key   string `db:"key"`
		Value string `db:"value"`
	}
)

func newKvModel(conn sqlx.SqlConn) *defaultKvModel {
	return &defaultKvModel{
		conn:  conn,
		table: "`kv`",
	}
}

func (m *defaultKvModel) withSession(session sqlx.Session) *defaultKvModel {
	return &defaultKvModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`kv`",
	}
}

func (m *defaultKvModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultKvModel) FindOne(ctx context.Context, id int64) (*Kv, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", kvRows, m.table)
	var resp Kv
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultKvModel) FindOneByKey(ctx context.Context, key string) (*Kv, error) {
	var resp Kv
	query := fmt.Sprintf("select %s from %s where `key` = ? limit 1", kvRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, key)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultKvModel) Insert(ctx context.Context, data *Kv) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, kvRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Key, data.Value)
	return ret, err
}

func (m *defaultKvModel) Update(ctx context.Context, newData *Kv) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, kvRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Key, newData.Value, newData.Id)
	return err
}

func (m *defaultKvModel) tableName() string {
	return m.table
}
