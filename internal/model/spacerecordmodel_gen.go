// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	spaceRecordFieldNames          = builder.RawFieldNames(&SpaceRecord{})
	spaceRecordRows                = strings.Join(spaceRecordFieldNames, ",")
	spaceRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(spaceRecordFieldNames, "`id`"), ",")
	spaceRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(spaceRecordFieldNames, "`id`"), "=?,") + "=?"
)

type (
	spaceRecordModel interface {
		Insert(ctx context.Context, data *SpaceRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SpaceRecord, error)
		Update(ctx context.Context, data *SpaceRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSpaceRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SpaceRecord struct {
		Id           int64     `db:"id"`
		WorkspaceId  string    `db:"workspace_id"`
		Status       string    `db:"status"`
		SerialNumber string    `db:"serial_number"`
		RunTime      time.Time `db:"run_time"`
		RecordName   string    `db:"record_name"`
	}
)

func newSpaceRecordModel(conn sqlx.SqlConn) *defaultSpaceRecordModel {
	return &defaultSpaceRecordModel{
		conn:  conn,
		table: "`space_record`",
	}
}

func (m *defaultSpaceRecordModel) withSession(session sqlx.Session) *defaultSpaceRecordModel {
	return &defaultSpaceRecordModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`space_record`",
	}
}

func (m *defaultSpaceRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSpaceRecordModel) FindOne(ctx context.Context, id int64) (*SpaceRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaceRecordRows, m.table)
	var resp SpaceRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSpaceRecordModel) Insert(ctx context.Context, data *SpaceRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, spaceRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.Status, data.SerialNumber, data.RunTime, data.RecordName)
	return ret, err
}

func (m *defaultSpaceRecordModel) Update(ctx context.Context, data *SpaceRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, spaceRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.Status, data.SerialNumber, data.RunTime, data.RecordName, data.Id)
	return err
}

func (m *defaultSpaceRecordModel) tableName() string {
	return m.table
}
