// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	moduleRelationFieldNames          = builder.RawFieldNames(&ModuleRelation{})
	moduleRelationRows                = strings.Join(moduleRelationFieldNames, ",")
	moduleRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(moduleRelationFieldNames, "`id`"), ",")
	moduleRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(moduleRelationFieldNames, "`id`"), "=?,") + "=?"
)

type (
	moduleRelationModel interface {
		Insert(ctx context.Context, data *ModuleRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ModuleRelation, error)
		Update(ctx context.Context, data *ModuleRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultModuleRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ModuleRelation struct {
		Id       int64  `db:"id"`
		ModuleId string `db:"module_id"`
		GoalId   string `db:"goal_id"`
		Types    string `db:"types"`
	}
)

func newModuleRelationModel(conn sqlx.SqlConn) *defaultModuleRelationModel {
	return &defaultModuleRelationModel{
		conn:  conn,
		table: "`module_relation`",
	}
}

func (m *defaultModuleRelationModel) withSession(session sqlx.Session) *defaultModuleRelationModel {
	return &defaultModuleRelationModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`module_relation`",
	}
}

func (m *defaultModuleRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultModuleRelationModel) FindOne(ctx context.Context, id int64) (*ModuleRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", moduleRelationRows, m.table)
	var resp ModuleRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultModuleRelationModel) Insert(ctx context.Context, data *ModuleRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, moduleRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ModuleId, data.GoalId, data.Types)
	return ret, err
}

func (m *defaultModuleRelationModel) Update(ctx context.Context, data *ModuleRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, moduleRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ModuleId, data.GoalId, data.Types, data.Id)
	return err
}

func (m *defaultModuleRelationModel) tableName() string {
	return m.table
}
