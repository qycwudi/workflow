// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	workspaceTagFieldNames          = builder.RawFieldNames(&WorkspaceTag{})
	workspaceTagRows                = strings.Join(workspaceTagFieldNames, ",")
	workspaceTagRowsExpectAutoSet   = strings.Join(stringx.Remove(workspaceTagFieldNames, "`id`"), ",")
	workspaceTagRowsWithPlaceHolder = strings.Join(stringx.Remove(workspaceTagFieldNames, "`id`"), "=?,") + "=?"
)

type (
	workspaceTagModel interface {
		Insert(ctx context.Context, data *WorkspaceTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WorkspaceTag, error)
		Update(ctx context.Context, data *WorkspaceTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWorkspaceTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WorkspaceTag struct {
		Id         int64     `db:"id"`          // 自增主建
		TagName    string    `db:"tag_name"`    // 标签名称
		IsDelete   int64     `db:"is_delete"`   // 逻辑删除
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
	}
)

func newWorkspaceTagModel(conn sqlx.SqlConn) *defaultWorkspaceTagModel {
	return &defaultWorkspaceTagModel{
		conn:  conn,
		table: "`workspace_tag`",
	}
}

func (m *defaultWorkspaceTagModel) withSession(session sqlx.Session) *defaultWorkspaceTagModel {
	return &defaultWorkspaceTagModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`workspace_tag`",
	}
}

func (m *defaultWorkspaceTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWorkspaceTagModel) FindOne(ctx context.Context, id int64) (*WorkspaceTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workspaceTagRows, m.table)
	var resp WorkspaceTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorkspaceTagModel) Insert(ctx context.Context, data *WorkspaceTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, workspaceTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TagName, data.IsDelete, data.CreateTime, data.UpdateTime)
	return ret, err
}

func (m *defaultWorkspaceTagModel) Update(ctx context.Context, data *WorkspaceTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, workspaceTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TagName, data.IsDelete, data.CreateTime, data.UpdateTime, data.Id)
	return err
}

func (m *defaultWorkspaceTagModel) tableName() string {
	return m.table
}
