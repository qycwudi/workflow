// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	traceFieldNames          = builder.RawFieldNames(&Trace{})
	traceRows                = strings.Join(traceFieldNames, ",")
	traceRowsExpectAutoSet   = strings.Join(stringx.Remove(traceFieldNames, "`id`"), ",")
	traceRowsWithPlaceHolder = strings.Join(stringx.Remove(traceFieldNames, "`id`"), "=?,") + "=?"
)

type (
	traceModel interface {
		Insert(ctx context.Context, data *Trace) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Trace, error)
		Update(ctx context.Context, data *Trace) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTraceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Trace struct {
		Id          int64     `db:"id"`
		WorkspaceId string    `db:"workspace_id"` // 空间 ID
		TraceId     string    `db:"trace_id"`     // 追踪 ID
		Input       string    `db:"input"`        // 组件输入
		Logic       string    `db:"logic"`        // 执行逻辑
		Output      string    `db:"output"`       // 组件输出
		Step        int64     `db:"step"`         // 分步
		NodeId      string    `db:"node_id"`      // 节点 ID
		NodeName    string    `db:"node_name"`    // 节点名称
		Status      string    `db:"status"`       // 运行状态
		ElapsedTime int64     `db:"elapsed_time"` // 运行耗时
		StartTime   time.Time `db:"start_time"`   // 执行时间
		ErrorMsg    string    `db:"error_msg"`    // 错误信息
	}
)

func newTraceModel(conn sqlx.SqlConn) *defaultTraceModel {
	return &defaultTraceModel{
		conn:  conn,
		table: "`trace`",
	}
}

func (m *defaultTraceModel) withSession(session sqlx.Session) *defaultTraceModel {
	return &defaultTraceModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`trace`",
	}
}

func (m *defaultTraceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTraceModel) FindOne(ctx context.Context, id int64) (*Trace, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", traceRows, m.table)
	var resp Trace
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTraceModel) Insert(ctx context.Context, data *Trace) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, traceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.TraceId, data.Input, data.Logic, data.Output, data.Step, data.NodeId, data.NodeName, data.Status, data.ElapsedTime, data.StartTime, data.ErrorMsg)
	return ret, err
}

func (m *defaultTraceModel) Update(ctx context.Context, data *Trace) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, traceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WorkspaceId, data.TraceId, data.Input, data.Logic, data.Output, data.Step, data.NodeId, data.NodeName, data.Status, data.ElapsedTime, data.StartTime, data.ErrorMsg, data.Id)
	return err
}

func (m *defaultTraceModel) tableName() string {
	return m.table
}
