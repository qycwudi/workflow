// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	apiSecretKeyFieldNames          = builder.RawFieldNames(&ApiSecretKey{})
	apiSecretKeyRows                = strings.Join(apiSecretKeyFieldNames, ",")
	apiSecretKeyRowsExpectAutoSet   = strings.Join(stringx.Remove(apiSecretKeyFieldNames, "`id`"), ",")
	apiSecretKeyRowsWithPlaceHolder = strings.Join(stringx.Remove(apiSecretKeyFieldNames, "`id`"), "=?,") + "=?"
)

type (
	apiSecretKeyModel interface {
		Insert(ctx context.Context, data *ApiSecretKey) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ApiSecretKey, error)
		Update(ctx context.Context, data *ApiSecretKey) error
		Delete(ctx context.Context, id int64) error
	}

	defaultApiSecretKeyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ApiSecretKey struct {
		Id             int64     `db:"id"`
		SecretKey      string    `db:"secret_key"`
		ApiId          string    `db:"api_id"`
		ExpirationTime time.Time `db:"expiration_time"`
	}
)

func newApiSecretKeyModel(conn sqlx.SqlConn) *defaultApiSecretKeyModel {
	return &defaultApiSecretKeyModel{
		conn:  conn,
		table: "`api_secret_key`",
	}
}

func (m *defaultApiSecretKeyModel) withSession(session sqlx.Session) *defaultApiSecretKeyModel {
	return &defaultApiSecretKeyModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`api_secret_key`",
	}
}

func (m *defaultApiSecretKeyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultApiSecretKeyModel) FindOne(ctx context.Context, id int64) (*ApiSecretKey, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", apiSecretKeyRows, m.table)
	var resp ApiSecretKey
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApiSecretKeyModel) Insert(ctx context.Context, data *ApiSecretKey) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, apiSecretKeyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SecretKey, data.ApiId, data.ExpirationTime)
	return ret, err
}

func (m *defaultApiSecretKeyModel) Update(ctx context.Context, data *ApiSecretKey) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, apiSecretKeyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SecretKey, data.ApiId, data.ExpirationTime, data.Id)
	return err
}

func (m *defaultApiSecretKeyModel) tableName() string {
	return m.table
}
