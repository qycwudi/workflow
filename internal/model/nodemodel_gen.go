// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	nodeFieldNames          = builder.RawFieldNames(&Node{})
	nodeRows                = strings.Join(nodeFieldNames, ",")
	nodeRowsExpectAutoSet   = strings.Join(stringx.Remove(nodeFieldNames, "`id`"), ",")
	nodeRowsWithPlaceHolder = strings.Join(stringx.Remove(nodeFieldNames, "`id`"), "=?,") + "=?"
)

type (
	nodeModel interface {
		Insert(ctx context.Context, data *Node) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Node, error)
		FindOneByNodeId(ctx context.Context, nodeId string) (*Node, error)
		Update(ctx context.Context, data *Node) error
		Delete(ctx context.Context, id int64) error
	}

	defaultNodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Node struct {
		Id                 int64     `db:"id"`
		NodeId             string    `db:"node_id"`
		NodeType           string    `db:"node_type"`            // 组件类型
		LabelConfig        string    `db:"label_config"`         // 前端字段配置
		CustomConfig       string    `db:"custom_config"`        // 组件自定义配置
		TaskConfig         string    `db:"task_config"`          // 任务配置
		StyleConfig        string    `db:"style_config"`         // 样式配置
		AnchorPointsConfig string    `db:"anchor_points_config"` // 锚点配置
		Position           string    `db:"position"`             // 坐标配置
		CreateTime         time.Time `db:"create_time"`
		UpdateTime         time.Time `db:"update_time"`
		NodeName           string    `db:"node_name"`     // 节点名称
		Configuration      string    `db:"configuration"` // 组件通用配置
		WorkspaceId        string    `db:"workspace_id"`  // 空间 ID
	}
)

func newNodeModel(conn sqlx.SqlConn) *defaultNodeModel {
	return &defaultNodeModel{
		conn:  conn,
		table: "`node`",
	}
}

func (m *defaultNodeModel) withSession(session sqlx.Session) *defaultNodeModel {
	return &defaultNodeModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`node`",
	}
}

func (m *defaultNodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNodeModel) FindOne(ctx context.Context, id int64) (*Node, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", nodeRows, m.table)
	var resp Node
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNodeModel) FindOneByNodeId(ctx context.Context, nodeId string) (*Node, error) {
	var resp Node
	query := fmt.Sprintf("select %s from %s where `node_id` = ? limit 1", nodeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, nodeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNodeModel) Insert(ctx context.Context, data *Node) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, nodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.NodeId, data.NodeType, data.LabelConfig, data.CustomConfig, data.TaskConfig, data.StyleConfig, data.AnchorPointsConfig, data.Position, data.CreateTime, data.UpdateTime, data.NodeName, data.Configuration, data.WorkspaceId)
	return ret, err
}

func (m *defaultNodeModel) Update(ctx context.Context, newData *Node) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, nodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.NodeId, newData.NodeType, newData.LabelConfig, newData.CustomConfig, newData.TaskConfig, newData.StyleConfig, newData.AnchorPointsConfig, newData.Position, newData.CreateTime, newData.UpdateTime, newData.NodeName, newData.Configuration, newData.WorkspaceId, newData.Id)
	return err
}

func (m *defaultNodeModel) tableName() string {
	return m.table
}
