// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gogogoKvFieldNames          = builder.RawFieldNames(&GogogoKv{})
	gogogoKvRows                = strings.Join(gogogoKvFieldNames, ",")
	gogogoKvRowsExpectAutoSet   = strings.Join(stringx.Remove(gogogoKvFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gogogoKvRowsWithPlaceHolder = strings.Join(stringx.Remove(gogogoKvFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gogogoKvModel interface {
		Insert(ctx context.Context, data *GogogoKv) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GogogoKv, error)
		Update(ctx context.Context, data *GogogoKv) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGogogoKvModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GogogoKv struct {
		Id         int64  `db:"id"`
		SpiderName string `db:"spider_name"`
		K          string `db:"k"`
		V          string `db:"v"`
		Timestamp  int64  `db:"timestamp"`
	}
)

func newGogogoKvModel(conn sqlx.SqlConn) *defaultGogogoKvModel {
	return &defaultGogogoKvModel{
		conn:  conn,
		table: "`gogogo_kv`",
	}
}

func (m *defaultGogogoKvModel) withSession(session sqlx.Session) *defaultGogogoKvModel {
	return &defaultGogogoKvModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`gogogo_kv`",
	}
}

func (m *defaultGogogoKvModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGogogoKvModel) FindOne(ctx context.Context, id int64) (*GogogoKv, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gogogoKvRows, m.table)
	var resp GogogoKv
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGogogoKvModel) Insert(ctx context.Context, data *GogogoKv) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, gogogoKvRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.SpiderName, data.K, data.V, data.Timestamp)
	return ret, err
}

func (m *defaultGogogoKvModel) Update(ctx context.Context, data *GogogoKv) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gogogoKvRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SpiderName, data.K, data.V, data.Timestamp, data.Id)
	return err
}

func (m *defaultGogogoKvModel) tableName() string {
	return m.table
}
