syntax = "v1"

type CanvasRunRequest {
	Id string `json:"id" desc:"空间ID"`
}

type CanvasRunResponse {
	Ts       int64             `json:"ts"`
	Id       string            `json:"id"`
	MetaData map[string]string `json:"metadata"`
	Data     interface{}       `json:"data"`
}

type CanvasRunSingleRequest {
	Id     string `json:"id" desc:"空间ID"`
	NodeId string `json:"nodeId" desc:"节点ID"`
}

type CanvasRunSingleResponse {
	Ts       int64             `json:"ts"`
	Id       string            `json:"id"`
	MetaData map[string]string `json:"metadata"`
	Data     interface{}       `json:"data"`
}

type CanvasRunSingleDetailRequest {
	Id     string `json:"id"`     // 空间ID
	NodeId string `json:"nodeId"` // 节点ID
}

type CanvasRunSingleDetailResponse {
	NodeId    string `json:"nodeId"`
	NodeName  string `json:"nodeName"`
	StartTime int64  `json:"startTime"`
	Duration  int64  `json:"duration"`
	Status    string `json:"status"`
	Error     string `json:"error"`
	Input     string `json:"input"`
	Output    string `json:"output"`
}

type GetCanvasRunHistoryReq {
	WorkSpaceId string `path:"workSpaceId"`
}

type RunHistoryRecord {
	Id             string `json:"id"`             // 运行记录ID
	StartTime      string `json:"startTime"`      // 开始时间，ISO格式
	Duration       int64  `json:"duration"`       // 总耗时(ms)
	Status         string `json:"status"`         // 运行状态
	ComponentCount int64  `json:"componentCount"` // 组件数量
}

type GetCanvasRunHistoryResp {
	Records []RunHistoryRecord `json:"records"`
	Total   int64              `json:"total"` // 总记录数
}

type (
	// 请求
	GetCanvasRunDetailReq {
		RecordId string `path:"recordId"` // 运行记录ID
	}
	// 响应
	GetCanvasRunDetailResp {
		Id         string            `json:"id"`         // 运行记录ID
		StartTime  string            `json:"startTime"`  // 开始时间
		Duration   int64             `json:"duration"`   // 总耗时(ms)
		Status     string            `json:"status"`     // 运行状态 success/failed
		Error      string            `json:"error"`      // 错误信息
		Components []ComponentDetail `json:"components"` // 组件列表
	}
	// 组件详情
	ComponentDetail {
		Id        string                 `json:"id"`        // 组件ID
		Name      string                 `json:"name"`      // 组件名称
		Logic     string                 `json:"logic"`     // 组件类型
		StartTime int64                  `json:"startTime"` // 开始时间戳
		Duration  int64                  `json:"duration"`  // 耗时(ms)
		Status    string                 `json:"status"`    // 组件运行状态 success/failed
		Error     string                 `json:"error"`     // 组件错误信息
		Input     map[string]interface{} `json:"input"`     // 输入参数
		Output    map[string]interface{} `json:"output"`    // 输出结果
	}
)

type CanvasDraftRequest {
	Id    string                 `json:"id"`
	Graph map[string]interface{} `json:"graph"`
}

type CanvasDraftResponse {
	Hash       string `json:"hash"`
	UpdateTime int64  `json:"updateTime"`
}

type EdgeCustomData {
	SourcePoint int `json:"sourcePoint"`
	TargetPoint int `json:"targetPoint"`
}

type CanvasDetailRequest {
	Id string `json:"id"`
}

type CanvasDetailResponse {
	Id    string                 `json:"id"`
	Name  string                 `json:"name"`
	Graph map[string]interface{} `json:"graph"`
}

type SaveCanvasHistoryReq {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

type SaveCanvasHistoryResp {
	Id int64 `json:"id"`
}

type GetCanvasHistoryListReq {
	Name        string `json:"name,optional"`
	Mode        int64  `json:"mode,optional" common:"0-草稿 1-api 2-job"`
	WorkspaceId string `json:"workspaceId"`
	Current     int    `json:"current"`
	PageSize    int    `json:"pageSize"`
}

type GetCanvasHistoryListResp {
	Records []CanvasHistoryRecord `json:"records"`
	Total   int64                 `json:"total"` // 总记录数
}

type CanvasHistoryRecord {
	Id         int64  `json:"id"`
	CreateTime string `json:"createTime"`
	Mode       int64  `json:"mode" common:"0-草稿 1-api 2-job"`
	Name       string `json:"name"`
}

type GetCanvasHistoryDetailReq {
	Id int64 `json:"id"`
}

type GetCanvasHistoryDetailResp {
	Id    int64                  `json:"id"`
	Name  string                 `json:"name"`
	Graph map[string]interface{} `json:"graph"`
}

type RestoreCanvasHistoryReq {
	Id int64 `json:"id"`
}

type RestoreCanvasHistoryResp {
	Id          int64  `json:"id"`
	WorkspaceId string `json:"workspaceId"`
}

@server (
	// 代表当前 service 代码块下的路由生成代码时都会被放到 login 目录下
	group: canvas
	// 定义路由前缀为 "/v1"
	prefix: /workflow
	jwt: Auth // 开启 jwt 认证
	middleware: PermissionMiddleware // 开启权限认证
)
service workflow-api {
	@doc "画布更新"
	@handler CanvasDraftHandler
	post /canvas/draft (CanvasDraftRequest) returns (CanvasDraftResponse)

	@doc "画布详情"
	@handler CanvasDetailHandler
	post /canvas/detail (CanvasDetailRequest) returns (CanvasDetailResponse)

	@doc "全部运行"
	@handler CanvasRunHandler
	post /canvas/run (CanvasRunRequest) returns (CanvasRunResponse)

	@doc "单组件运行"
	@handler CanvasRunSingleHandler
	post /canvas/run/single (CanvasRunSingleRequest) returns (CanvasRunSingleResponse)

	@doc "组件运行详情"
	@handler CanvasRunSingleDetailHandler
	post /canvas/run/single/detail (CanvasRunSingleDetailRequest) returns (CanvasRunSingleDetailResponse)

	@doc "获取画布运行历史"
	@handler getCanvasRunHistory
	get /canvas/run/history/:workSpaceId (GetCanvasRunHistoryReq) returns (GetCanvasRunHistoryResp)

	@doc "获取画布运行详情"
	@handler getCanvasRunDetail
	get /canvas/run/detail/:recordId (GetCanvasRunDetailReq) returns (GetCanvasRunDetailResp)

	@doc "保存历史版本"
	@handler saveCanvasHistory
	post /canvas/history/save (SaveCanvasHistoryReq) returns (SaveCanvasHistoryResp)

	@doc "获取历史版本列表"
	@handler getCanvasHistoryList
	post /canvas/history/list (GetCanvasHistoryListReq) returns (GetCanvasHistoryListResp)

	@doc "恢复历史版本"
	@handler restoreCanvasHistory
	post /canvas/history/restore (RestoreCanvasHistoryReq) returns (RestoreCanvasHistoryResp)
}